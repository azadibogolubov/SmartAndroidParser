options {
}
 
PARSER_BEGIN(DroidParser)
import java.io.*;
import java.util.*;

public class DroidParser {
    static int numTabs;
    static Stack<String> unclosedTags;
    static File file;
    static FileWriter fw;
    static BufferedWriter bw;
    static ArrayList<String> indents;

    static String badId = "ERROR: Bad ID";
    static String badName = "ERROR: Bad Name";
    static String needFileName = "Please provide file name in arguments list...";
    static String couldNotProcessFile = "DroidParser: The file was not able to be processed...";
    static String bwError = "IOException: BufferedWriter error...";
    static String closeWriterError = "Could not close writer...";
    static String layout_width = "android:layout_width=";
    static String layout_height = "android:layout_height=";
    static String wrap_content = "\"wrap_content\"";
    static String match_parent = "\"match_parent\"";

    public static void main(String[] args) throws ParseException {
        try {
            numTabs = 0;
            unclosedTags = new Stack<String>();
            file = new File(args[1]);
            fw = new FileWriter(file.getAbsoluteFile());
            bw = new BufferedWriter(fw);
            indents = new ArrayList<String>();

            if (args.length == 0) {
                System.out.println(needFileName);
            }
            else {
                try {
                    DroidParser parser = new DroidParser(new FileInputStream(args[0]));
                    while (true) {
                        parser.parseNextLine();
                    }
                }
                catch (FileNotFoundException e) {
                    System.out.println();
                    return;
                }
            }   
        }
        catch (IOException e) {
            System.out.println(bwError);
        }
    }

    private static void write(String input) {
        try {
            bw.write(input);
        }
        catch (IOException e) {}
    }

    private static void writeln(String input) {
        try {
            bw.write(input);
            bw.newLine();
        }
        catch (IOException e) {}
    }

    private static void close() {
        try {
            bw.close();
        }
        catch (IOException e) {
            System.out.println(closeWriterError);
        }
    }

    private static void processIndents(Token type) {
        String input = type.toString();
        if (input.contains("\t")) {
            indents = ((ArrayList<String>) Arrays.asList(input.split("\t")));
            if (indents.size() > 0) {
                numTabs = indents.size() - 1;
                unclosedTags.push(input);
            }
        }
    }
}
 
PARSER_END(DroidParser)
 
SKIP:
{
    " " | "\r" | "\t"
}
 
TOKEN:
{
    <HELP: "HELP">
    | <NUMBER: (<DIGIT>)+ ("."(<DIGIT>)+)?> 
    | <DIGIT: ["0"-"9"]> 
    | <BUTTON: "Button"> 
    | <EDITTEXT: "EditText"> 
    | <TEXTVIEW: "TextView"> 
    | <LISTVIEW: "ListView"> 
    | <RECYCLERVIEW: "RecyclerView">
    | <RELLAYOUT: "RelativeLayout"> 
    | <LINLAYOUT: "LinearLayout"> 
    | <CLICK: "Click">
    | <TEXT: ("\"")((["A"-"Z", "a"-"z", "0"-"9", " "])+)("\"")>
    | <VAR: (["A"-"Z", "a"-"z"]){1} (["A"-"Z", "a"-"z", "0"-"9"])*> 
    | <CLOSETAG: "/">
    | <EOL: "\n">
}
 
void parseNextLine():
{
    String type;
    String name;
    String id;
    String text;
}
{
    type=controlType() name=name() id=id() text=controlText() <EOL>
    {
    	writeln("<" + type);
        writeln("\t" + layout_width + wrap_content);
        writeln("\t" + layout_height + wrap_content);
    	writeln("\tandroid:text=" + text + " />");
        numTabs = 0;
    }
    |
    type=layoutType() name=name() id=id() <EOL>
    {
        write("    ");
        writeln("<" + type);
        writeln("\tandroid:id=\"@+id/" + id + "\"");
        writeln("\t" + layout_width + wrap_content);
        writeln("\t" + layout_height + wrap_content + ">");
        unclosedTags.push(type);
        numTabs = 0;
    }
    |
    <CLICK> id=id() <EOL>
    {
        writeln(id + ".setOnClickListener(new View.OnClickListener() {");
        writeln("@Override");
        writeln("\tpublic void onClick(View v) {");
        writeln("\t\t// Add click logic here...");
        writeln("\t}");
        writeln("});");
        numTabs = 0;
    }
    |
    <CLOSETAG> <EOL>
    {
        writeln("</" + unclosedTags.pop() + ">");
    }
    |
    <EOF>   
    { 
        close(); 
        System.exit(0); 
    }
}

String controlType():
{
    Token type;
}
{
    type = <BUTTON> { return type.toString(); }
    | type = <EDITTEXT> { return type.toString(); }
    | type = <TEXTVIEW> { return type.toString(); }
    | type = <LISTVIEW> { return type.toString(); }
    | type = <RECYCLERVIEW> { return type.toString(); }
}

String layoutType():
{
    Token type;
}
{
    type = <RELLAYOUT> { 
        processIndents(type);
        return type.toString(); 
    }
    | type = <LINLAYOUT> {
        processIndents(type); 
        return type.toString(); 
    }
}

String name():
{
    Token name;
}
{
    name = <VAR> { return name.toString(); }
    | name = <TEXT> 
    { 
        System.out.println(badName); 
        return badName; 
    }
}

String id():
{
    Token id;
}
{
    id = <VAR> { return id.toString(); }
    | id = <TEXT> 
    { 
        System.out.println(badId); 
        return badId; 
    }
}

String controlText():
{
    Token text;
}
{
    text = <TEXT> { return text.toString(); }
}