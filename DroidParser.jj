options {
    LOOKAHEAD = 3;
}
 
PARSER_BEGIN(DroidParser)
import java.io.*;
import java.util.*;
import java.nio.file.Paths;

public class DroidParser {
    // ADTs
    static Stack<String> unclosedTags;
    static File file;
    static FileWriter fw;
    static BufferedWriter bw;

    // Error Strings
    static String badId = "ERROR: Bad ID";
    static String badName = "ERROR: Bad Name";
    static String needFileName = "Please provide file name in arguments list...";
    static String couldNotProcessFile = "DroidParser: The file was not able to be processed...";
    static String bwError = "IOException: BufferedWriter error...";
    static String closeWriterError = "Could not close writer...";

    // Resource strings
    static String layout_width = "android:layout_width=";
    static String layout_height = "android:layout_height=";
    static String wrap_content = "\"wrap_content\"";
    static String match_parent = "\"match_parent\"";

    // Primitives
    static boolean firstElement = true;
    static int numTabs;

    // Home directory
    static String homeDir;

    public static void main(String[] args) throws ParseException {
        try {
            // Number of tabs
            numTabs = 0;

            // Stack of unclosed tags
            unclosedTags = new Stack<String>();

            // TODO: Remove file specifier and use separator tag.
            file = new File(args[1]);
            fw = new FileWriter(file.getAbsoluteFile());

            // Buffered writer for writing output to file(s).
            bw = new BufferedWriter(fw);

            // TODO: Remove this requirement, as want to be able to specify file names in the actual script.
            if (args.length == 0) {
                System.out.println(needFileName);
            }
            else {
                // Try to parse the input script.
                try {
                    DroidParser parser = new DroidParser(new FileInputStream(args[0]));
                    while (true) {
                        parser.parseNextLine();
                    }
                }
                catch (FileNotFoundException e) {
                    System.out.println(couldNotProcessFile);
                    return;
                }
            }   
        }
        catch (IOException e) {
            System.err.println(bwError);
        }
    }

    // Write input to file, similar to print.
    private static void write(String input) {
        try {
            bw.write(input);
        }
        catch (IOException e) {
            System.err.println(bwError);
        }
    }

    // Write input to file, similar to println.
    private static void writeln(String input) {
        try {
            bw.write(input);
            bw.newLine();
        }
        catch (IOException e) {
            System.err.println(bwError);
        }
    }

    // Write a line with tabs as needed.
    private static void writeTabbedLine(String input) {
        try {
            for (int i = 0; i < numTabs; i++) {
                write("" + "\t");
            }
            bw.write("" + "\t");
            bw.write(input);
            bw.newLine();
        }
        catch (IOException e) {}
    }

    // Close the buffered writer.
    private static void close() {
        try {
            bw.close();
        }
        catch (IOException e) {
            System.out.println(closeWriterError);
        }
    }

    // Write out the formatting for margins/padding.
    private static void writeFormatting(String type, String[] qualifier) {
        for (int i = 0; i < qualifier.length; i+=5) { 
            if (type.equals("margin")) {
                type = "layout_" + type;
            }
            writeTabbedLine("android:" + type + "Left=\"" + qualifier[1] + "dp\"");
            writeTabbedLine("android:" + type + "Top=\"" + qualifier[2] + "dp\""); 
            writeTabbedLine("android:" + type + "Right=\"" + qualifier[3] + "dp\"");
            writeTabbedLine("android:" + type + "Bottom=\"" + qualifier[4] + "dp\" >");
        }
    }

    // Write out boilerplate id, width, and height.
    private static void writeIdWidthAndHeight(String id) {
        writeTabbedLine("android:id=\"@+id/" + id + "\"");
        writeTabbedLine(layout_width + wrap_content);
        writeTabbedLine(layout_height + wrap_content);
    }

    // Write out boilerplate id, width, and height, with an endtag.
    private static void writeIdWidthAndHeight(String id, String endTag) {
        writeTabbedLine("android:id=\"@+id/" + id + "\"");
        writeTabbedLine(layout_width + wrap_content);
        writeTabbedLine(layout_height + wrap_content + endTag);
    }

    // Write out boilerplate XML dialog code.
    private static void createDialog(String id) {
        writeln("<LinearLayout");
        writeTabbedLine("xmlns:android=\"http://schemas.android.com/apk/res/android\"");
        writeTabbedLine("android:orientation=\"vertical\"");
        writeIdWidthAndHeight(id, ">");

        writeln("");

        writeTabbedLine("<TextView");

        numTabs += 1;

        writeTabbedLine("android:id=\"@+id/option1\"");
        writeTabbedLine("android:layout_width=\"match_parent\"");
        writeTabbedLine("android:layout_height=\"wrap_content\"");
        writeTabbedLine("android:text=\"Option 1\"");
        writeTabbedLine("android:textSize=\"16sp\">");

        writeln("");
        numTabs -= 1;
        writeTabbedLine("<TextView");
        numTabs += 1;
        writeTabbedLine("android:id=\"@+id/option2\"");
        writeTabbedLine("android:layout_width=\"match_parent\"");
        writeTabbedLine("android:layout_height=\"wrap_content\"");
        writeTabbedLine("android:text=\"Option 2\"");
        writeTabbedLine("android:textSize=\"16sp\">");

        writeln("");
        numTabs -= 1;
        writeTabbedLine("<TextView");
        numTabs += 1;
        writeTabbedLine("android:id=\"@+id/cancel\"");
        writeTabbedLine("android:layout_width=\"match_parent\"");
        writeTabbedLine("android:layout_height=\"wrap_content\"");
        writeTabbedLine("android:text=\"Cancel\"");
        writeTabbedLine("android:textSize=\"16sp\"");
        writeTabbedLine("android:layout_gravity=\"right\">");        

        writeln("</LinearLayout>");
    }
}
 
PARSER_END(DroidParser)
 
SKIP:
{
    " " | "\r" | "\t"
}
 
TOKEN:
{
    // Digits
    <NUMBER: (<DIGIT>)+ ("."(<DIGIT>)+)?> 
    | <DIGIT: (["0"-"9"])+> 
    
    // XML
    | <MARGIN: "Margin">
    | <PADDING: "Padding">
    | <BUTTON: "Button"> 
    | <EDITTEXT: "EditText"> 
    | <TEXTVIEW: "TextView"> 
    | <LISTVIEW: "ListView"> 
    | <RECYCLERVIEW: "RecyclerView">
    | <RELLAYOUT: "RelativeLayout"> 
    | <LINLAYOUT: "LinearLayout"> 
    | <TV: "TV">
    | <ET: "ET">
    | <RL: "RL">
    | <LL: "LL">
    | <FAB: "FAB">
    | <BTN: "BTN">
    | <LV: "LV">
    | <RV: "RV">
    | <FRMLAYOUT: "FrameLayout">
    | <DIALOG: "Dialog">
    
    // Java
    | <NEWACTIVITY: "NewActivity">
    | <ENDFUNCTION: "End">
    | <ONCREATE: "OnCreate">
    
    // Event Handlers
    | <CLICK: "Click">
    
    // Text
    | <TEXT: ("\"")((["A"-"Z", "a"-"z", "0"-"9", " "])+)("\"")>
    | <VAR: (["A"-"Z", "a"-"z"]){1} (["A"-"Z", "a"-"z", "0"-"9"])*> 
    
    // Other
    | <ARGS: ("," <DIGIT>){4}>
    | <CLOSETAG: "/">
    | <INDENT: "\'">
    | <INDENTANDCLOSE: "~">
    | <FILE: ("-- " <VAR> "." <VAR>)>
    | <EOL: "\n">
}
 
void parseNextLine():
{
    String type;
    String name;
    String id;
    String text;
    String params;
    String args;
    String fileName;
}
{
    <EOL> {}
    
    // File name
    | fileName=fileName() <EOL>
    {
        try {
            firstElement = true;
            bw.close();
            file = new File(fileName);

            fw = new FileWriter(file.getAbsoluteFile());

            // Buffered writer for writing output to file(s).
            bw = new BufferedWriter(fw);
        } catch (IOException e) { 
            System.err.println("Could not open file for writing...");
        }
    }

    // New activity specifier (Java)
    | <NEWACTIVITY> <EOL>
    {
        writeln("public class newClass extends Activity {");
    }

    // On create code (Java)
    | <ONCREATE> <EOL>
    {
        writeln("\t@Override");
        writeln("\tpublic void onCreate(Bundle savedInstanceState) {");
        writeln("\t\tsuper.onCreate(savedInstanceState);");
    }

    // Close a function (Java)
    | <ENDFUNCTION> <EOL> 
    {
        numTabs--;
        if (numTabs > 0) {
            writeTabbedLine("}");
        } else {
            writeln("}");
        }
    }

    // Click handler (Java)
    | <CLICK> id=id() <EOL>
    {
        writeTabbedLine(id + ".setOnClickListener(new View.OnClickListener() {");
        writeTabbedLine("\t@Override");
        writeTabbedLine("\tpublic void onClick(View v) {");
        writeTabbedLine("\t\t// Add click listener logic...");
        writeTabbedLine("}");
    }

    // Close current tag.
    | <CLOSETAG> <EOL>
    {
        numTabs -= 1;
        if (unclosedTags.size() > 1) {
            writeTabbedLine("</" + unclosedTags.pop() + ">");
        }
        else {
            writeln("</" + unclosedTags.pop() + ">");
        }
    }

    // ********** Layouts **************
    // Indent (\)
    | <INDENT> type=layoutType() id=id() (params=params() args=args())+ <EOL>
    {
        numTabs += 1;
        for (int i = 0; i < numTabs; i++) {
            write("" + "\t");
        }
        writeln("<" + type);

        if (firstElement) {
            writeTabbedLine("xmlns:android=\"http://schemas.android.com/apk/res/android\"");
            firstElement = false;
        }

        if (type.equals("LinearLayout")) {
            writeTabbedLine("android:orientation=\"vertical\"");
        }

        writeIdWidthAndHeight(id);
        writeFormatting(params.toLowerCase(), args.split(","));
        write(">");
        unclosedTags.push(type);
    }

    // Indent followed by a layout and an id
    | <INDENT> type=layoutType() id=id() <EOL>
    {
        numTabs += 1;
        for (int i = 0; i < numTabs; i++) {
            write("" + "\t");
        }
        writeln("<" + type);

        if (firstElement) {
            writeTabbedLine("xmlns:android=\"http://schemas.android.com/apk/res/android\"");
            firstElement = false;
        }

        writeIdWidthAndHeight(id);
        write(">");
        unclosedTags.push(type);
    }

    // Indent, layout, id, margin/padding and Close (~)
    | <INDENTANDCLOSE> type=layoutType() id=id() (params=params() args=args())+ <EOL>
    {
        numTabs += 1;
        for (int i = 0; i < numTabs; i++) {
            write("" + "\t");
        }
        writeln("<" + type);

        if (firstElement) {
            writeTabbedLine("xmlns:android=\"http://schemas.android.com/apk/res/android\"");
            firstElement = false;
        }

        String[] paramsArray = args.split(",");
        String resolvedParam = "";
        writeFormatting(params.toLowerCase(), args.split(","));
        unclosedTags.push(type);
        writeln("</" + unclosedTags.pop() + ">");
        writeln("");
    }
    
    // Indent, layout, id, and close.
    | <INDENTANDCLOSE> type=layoutType() id=id() <EOL>
    {
        numTabs += 1;
        for (int i = 0; i < numTabs; i++) {
            write("" + "\t");
        }
        writeln("<" + type);

        if (firstElement) {
            writeTabbedLine("xmlns:android=\"http://schemas.android.com/apk/res/android\"");
            firstElement = false;
        }

        writeIdWidthAndHeight(id);
        writeln("");
        unclosedTags.push(type);
        writeln("</" + unclosedTags.pop() + ">");
        writeln("");
    }

    // Self Closing, layout, id (/)
    | <CLOSETAG> type=layoutType() id=id() <EOL>
    {
        for (int i = 0; i < numTabs; i++) {
            write("" + "\t");
        }
        writeln("<" + type);

        if (firstElement) {
            writeTabbedLine("xmlns:android=\"http://schemas.android.com/apk/res/android\"");
            firstElement = false;
        }

        writeIdWidthAndHeight(id);
        writeln("");
        unclosedTags.push(type);
        writeln("</" + unclosedTags.pop() + ">");
        writeln("");
    }

    // Layout, id, padding/margins
    | type=layoutType() id=id() (params=params() args=args())+ <EOL>
    {
        for (int i = 0; i < numTabs; i++) {
            write("" + "\t");
        }
        writeln("<" + type);
        if (firstElement) {
            writeTabbedLine("xmlns:android=\"http://schemas.android.com/apk/res/android\"");
            firstElement = false;
        }
        writeIdWidthAndHeight(id);
        writeFormatting(params.toLowerCase(), args.split(","));
        write(">");
        unclosedTags.push(type);
    }

    // Layout, id
    | type=layoutType() id=id() <EOL>
    {
        for (int i = 0; i < numTabs; i++) {
            write("" + "\t");
        }

        writeln("<" + type);
        if (firstElement) {
            writeTabbedLine("xmlns:android=\"http://schemas.android.com/apk/res/android\"");
            firstElement = false;
        }
        writeIdWidthAndHeight(id);
        write(">");
        writeln("");
        unclosedTags.push(type);
    }

    // ********** Controls **************
    // Indent, control, id, text
    | <INDENT> type=controlType() id=id() text=controlText() <EOL>
    {
        numTabs += 1;
        for (int i = 0; i < numTabs; i++) {
            write("" + "\t");
        }
        writeln("<" + type);
        writeIdWidthAndHeight(id);
        writeTabbedLine("android:text=" + text + " />");
        writeln("");
    }

    // Self closing indent, control, id, text
    | <INDENTANDCLOSE> type=controlType() id=id() text=controlText() <EOL>
    {
        numTabs += 1;
        for (int i = 0; i < numTabs; i++) {
            write("" + "\t");
        }
        writeln("<" + type);
        writeIdWidthAndHeight(id);
        writeln("");
        writeln("</" + unclosedTags.pop() + ">");
        writeln("");
    }
    // Clsoing tag, control, id, text
    | <CLOSETAG> type=controlType() id=id() text=controlText() <EOL>
    {
        for (int i = 0; i < numTabs; i++) {
            write("" + "\t");
        }
        writeln("<" + type);
        writeIdWidthAndHeight(id);
        writeln("");
        writeln("</" + unclosedTags.pop() + ">");
        writeln("");
    }
    // Control, id, text
    | type=controlType() id=id() text=controlText() <EOL>
    {
        for (int i = 0; i < numTabs; i++) {
            write("" + "\t");
        }
        writeln("<" + type);
        writeIdWidthAndHeight(id);
        writeTabbedLine("android:text=" + text + " />");
        writeln("");
    }
    | <FAB> id=id() <EOL>
    {
        for (int i = 0; i < numTabs; i++) {
            write("" + "\t");
        }
        writeln("<android.support.design.widget.FloatingActionButton");
        writeIdWidthAndHeight(id);
        writeTabbedLine("app:elevation=4dp");
        writeTabbedLine("app:fabSize=\"small\"");
        writeTabbedLine("android:src=\"android:drawable/ic_launcher\"/>");
        writeln("");        
    }
    // End of file.
    | <EOF>   
    { 
        close(); 
        System.exit(0); 
    }
}

String controlType():
{
    Token type;
}
{
    type = <BUTTON> { 
        return type.toString(); 
    }
    | type = <BTN> {
        return "Button";
    }
    | type = <EDITTEXT> { 
        return type.toString(); 
    }
    | type = <ET> {
        return "EditText";
    }
    | type = <TEXTVIEW> { 
        return type.toString();
    }
    | type = <TV> {
        return "TextView";
    }
    | type = <LISTVIEW> { 
        return type.toString(); 
    }
    | type = <LV> {
        return "ListView";
    }
    | type = <RECYCLERVIEW> { 
        return type.toString(); 
    }
    | type = <RV> {
        return "RecyclerView";
    }
}

String layoutType():
{
    Token type;
}
{
    type = <RELLAYOUT> { 
        return type.toString(); 
    }
    | type = <RL> {
        return "RelativeLayout";
    }
    | type = <LINLAYOUT> {
        return type.toString(); 
    }
    | type = <LL> {
        return "LinearLayout";
    }
    | type = <FRMLAYOUT> {
        return type.toString();
    }
}

String name():
{
    Token name;
}
{
    name = <VAR> 
    { 
        return name.toString(); 
    }
    | 
    name = <TEXT> 
    { 
        return name.toString();
    }
}

String id():
{
    Token id;
}
{
    id = <VAR> 
    { 
        return id.toString(); 
    }
    | 
    id = <TEXT> 
    { 
        return id.toString();
    }
}

String controlText():
{
    Token text;
}
{
    text = <TEXT> 
    { 
        return text.toString(); 
    }
}

String params():
{
    Token params;
}
{
    params = <MARGIN>
    { 
        return params.toString(); 
    }
    |
    params = <PADDING>
    {
        return params.toString();
    }
}

String args():
{
    Token args;
}
{
    args = <ARGS>
    {
        return args.toString();
    }   
}

String fileName():
{
    Token fileName;
}
{
    fileName = <FILE>
    {
        String result = fileName.toString().substring(3);
        result = result.substring(0, result.length());
        return result;
    }
}