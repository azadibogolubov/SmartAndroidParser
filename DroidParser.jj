options {
}
 
PARSER_BEGIN(DroidParser)
import java.io.*;
import java.util.*;

public class DroidParser {
    static Stack<String> unclosedTags;
    static File file;
    static FileWriter fw;
    static BufferedWriter bw;

    public static void main(String[] args) throws ParseException {
        try {
            unclosedTags = new Stack<String>();
            file = new File("output.xml");
            fw = new FileWriter(file.getAbsoluteFile());
            bw = new BufferedWriter(fw);

            if (args.length == 0) {
                System.out.println("Please provide file name in arguments list...");
            }
            else if (args.length == 1) {
                try {
                    DroidParser parser = new DroidParser(new FileInputStream(args[0]));
                    while (true) {
                        parser.parseNextLine();
                    }
                }
                catch (FileNotFoundException e) {
                    System.out.println("DroidParser: The file was not able to be processed...");
                    return;
                }
            }   
        }
        catch (IOException e) {
            System.out.println("IOException: BufferedWriter error...");
        }
    }

    public static void writeln(String input) {
        try {
            bw.write(input);
            bw.newLine();
        }
        catch (IOException e) {}
    }

    public static void close() {
        try {
            bw.close();
        }
        catch (IOException e) {
            System.out.println("Could not close writer...");
        }
    }
}
 
PARSER_END(DroidParser)
 
SKIP:
{
    " " | "\r" | "\t"
}
 
TOKEN:
{
    <HELP: "HELP">
    | <NUMBER: (<DIGIT>)+ ("."(<DIGIT>)+)?> 
    | <DIGIT: ["0"-"9"]> 
    | <BUTTON: "Button"> 
    | <EDITTEXT: "EditText"> 
    | <TEXTVIEW: "TextView"> 
    | <LISTVIEW: "ListView"> 
    | <RECYCLERVIEW: "RecyclerView">
    | <RELLAYOUT: "RelativeLayout"> 
    | <LINLAYOUT: "LinearLayout"> 
    | <CLICK: "Click">
    | <TEXT: ("\"")((["A"-"Z", "a"-"z", "0"-"9", " "])+)("\"")>
    | <VAR: (["A"-"Z", "a"-"z"]){1} (["A"-"Z", "a"-"z", "0"-"9"])*> 
    // | <MARGIN_LEFT: "ml">
    // | <MARGIN_RIGHT: "mr">
    // | <MARGIN_TOP: "mt">
    // | <MARGIN_BOTTOM: "mb">
    | <EOL: "\n">
}
 
void parseNextLine():
{
    String type;
    String name;
    String id;
    String text;
}
{
    type=controlType() name=name() id=id() text=controlText() <EOL>
    {
	// System.out.println("Java code:"); 
 //        System.out.println(type + " " + name + ";"); 
 //        System.out.println(name + " = (" + type + ") findViewById(R.id." + id + ");"); 
 //        System.out.println(name + ".setText(" + text + ");");
	// System.out.println();
	// System.out.println("XML code:");
    	writeln("<" + type);
        writeln("\tandroid:layout_width=\"wrap_content\"");
        writeln("\tandroid:layout_height=\"wrap_content\"");
    	writeln("\tandroid:text=" + text + " />");
        close();
    }
    |
    type=layoutType() name=name() id=id() <EOL>
    {
        // System.out.println(type + " " + name + ";");  
        // System.out.println(name + " = (" + type + ") findViewById(R.id." + id + ");"); 
        writeln("<" + type);
        writeln("\tandroid:id=\"@+id/" + id + "\"");
        writeln("\tandroid:layout_width=\"wrap_content\"");
        writeln("\tandroid:layout_height=\"wrap_content\" >");
        unclosedTags.push(type);
        //System.out.println("Tags: " + unclosedTags);
        writeln("</" + type + ">");
    }
    |
    <CLICK> id=id() <EOL>
    {
        writeln(id + ".setOnClickListener(new View.OnClickListener() {");
        writeln("@Override");
        writeln("\tpublic void onClick(View v) {");
        writeln("\t\t// Add click logic here...");
        writeln("\t}");
        writeln("});");
    }
    |
    <HELP> <EOL>
    {
        System.out.println("Valid types include:");
        System.out.println("[CONTROLTYPE]");
        System.out.println("Button, EditText, TextView, ListView, RecyclerView");
        System.out.println("[LAYOUTTYPE]");
        System.out.println("LinearLayout, RelativeLayout");
        System.out.println("Valid names follow the following regex convention:");
        System.out.println("[\"A\"-\"Z\", \"a\"-\"z\"]){1} ([\"A\"-\"Z\", \"a\"-\"z\", \"0\"-\"9\"]");
        System.out.println("Valid commands include:");
        System.out.println("[CONTROLTYPE] name id \"text\"");
        System.out.println("[LAYOUTTYPE] name id");
        System.out.println("CLICK id");
    }
    <EOL>
    |
    <EOF>   { System.exit(-1); }
}

String controlType():
{
    Token type;
}
{
    type = <BUTTON> { return type.toString(); }
    | type = <EDITTEXT> { return type.toString(); }
    | type = <TEXTVIEW> { return type.toString(); }
    | type = <LISTVIEW> { return type.toString(); }
    | type = <RECYCLERVIEW> { return type.toString(); }
}

String layoutType():
{
    Token type;
}
{
    type = <RELLAYOUT> { return type.toString(); }
    | type = <LINLAYOUT> { return type.toString(); }
}

String name():
{
    Token name;
}
{
    name = <VAR> { return name.toString(); }
    | name = <TEXT> 
    { 
        System.out.println("ERROR: Bad name"); 
        return ""; 
    }
}

String id():
{
    Token id;
}
{
    id = <VAR> { return id.toString(); }
    | id = <TEXT> 
    { 
        System.out.println("ERROR: Bad ID"); 
        return ""; 
    }
}

String controlText():
{
    Token text;
}
{
    text = <TEXT> { return text.toString(); }
}